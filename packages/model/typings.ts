import { VulcanSchema } from "@vulcanjs/schema";

type FilterFunction = (args: {
  input: any;
  context: any;
  filterArguments: any;
}) => { selector: Object; options: Object };

interface CanReadInput {
  user: any;
  document: any;
  model: VulcanModel;
  context: any;
  operationName: string; // "foobar.read.multi";
}
type CanReadFunction = (input: CanReadInput) => boolean;
type ArrayOrSingle<T> = Array<T> | T;
// TODO: get those typings from a shared permission package (they are currently already defined in vulcan:graphql package but we can't import it here
// to avoid a circular dependency)
type GroupName = string;
/**
 * Permission for a model
 */
export interface ModelPermissionsOptions {
  canRead?: CanReadFunction | ArrayOrSingle<GroupName>;
  canCreate?: Function | ArrayOrSingle<GroupName>;
  canUpdate?: Function | ArrayOrSingle<GroupName>;
  canDelete?: Function | ArrayOrSingle<GroupName>;
}

/**
 * Vulcan model, generated by the createModel function based on a schema and some options
 */
export interface VulcanModel {
  name: string;
  //customFilters: Array<{ name: string; filter: FilterFunction }>;
  description?: string;
  schema: VulcanSchema; // NOTE: the right type might be "Evalutated Schema" if we use new SimpleSchema(mySchema)._schema to get it
  permissions: ModelPermissionsOptions;
  options?: any; // TODO: used to add "customFilters", but to be improved, we should avoid generic option and have only options per extension (graphql, mongo, filtering...)
}
