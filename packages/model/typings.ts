import { VulcanSchema } from "@vulcanjs/schema";

type FilterFunction = (args: {
  input: any;
  context: any;
  filterArguments: any;
}) => { selector: Object; options: Object };

export interface PermissionsOptions {
  canRead?: Array<Function | string>; // TODO: put in common permission related stuffs
  canCreate?: Array<Function | string>; // TODO: put in common permission related stuffs
  canUpdate?: Array<Function | string>; // TODO: put in common permission related stuffs
  canDelete?: Array<Function | string>; // TODO: put in common permission related stuffs
}

/**
 * Vulcan model, generated by the createModel function based on a schema and some options
 */
export interface VulcanModel {
  name: string;
  //customFilters: Array<{ name: string; filter: FilterFunction }>;
  description?: string;
  schema: VulcanSchema; // NOTE: the right type might be "Evalutated Schema" if we use new SimpleSchema(mySchema)._schema to get it
  permissions: PermissionsOptions;
  options?: any; // TODO: used to add "customFilters", but to be improved, we should avoid generic option and have only options per extension (graphql, mongo, filtering...)
}
