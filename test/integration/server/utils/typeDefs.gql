
scalar JSON
scalar Date

# see https://docs.hasura.io/1.0/graphql/manual/queries/query-filters.html

input String_Selector {
  _eq: String
  _gt: String
  _gte: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  #_ilike: String
  #_nilike: String
  #_nin: [String!]
  #_nlike: String
  #_nsimilar: String
  #_similar: String
}

input String_Array_Selector {
  _in: [String!]
  _contains: String
  # _contains_all: [String_Selector]
}

input Int_Selector {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  #_is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  #_nin: [Int!]
}

input Int_Array_Selector {
  contains: Int_Selector
  # contains_all: [Int_Selector]
}

input Float_Selector {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  #_is_null: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  #_nin: [Float!]
}

input Float_Array_Selector {
  contains: Float_Selector
  # contains_all: [Float_Selector]
}

input Boolean_Selector {
  _eq: Boolean
  _neq: Boolean
}

input Boolean_Array_Selector {
  contains: Boolean_Selector
  # contains_all: [Boolean_Selector]
}

input Date_Selector {
  _eq: Date
  _gt: Date
  _gte: Date
  _in: [Date!]
  #_is_null: Boolean
  _lt: Date
  _lte: Date
  _neq: Date
  #_nin: [Date!]
}

input Date_Array_Selector {
  contains: Date_Selector
  # contains_all: [Date_Selector]
}

# column ordering options
enum SortOptions {
  asc
  desc
}

input OptionsInput {
  # Whether to enable caching for this query
  enableCache: Boolean
  # For single document queries, return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

type Contributor {
  _id: GraphQLObjectId 
  name: String 
}


input SingleContributorInput {
  # filtering
  filter: ContributorFilterInput
  sort: ContributorSortInput
  search: String
  id: String

  # backwards-compatibility
  # Deprecated (use 'filter/id' fields instead).
  selector: ContributorSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiContributorInput {

  # filtering
  filter: ContributorFilterInput
  sort: ContributorSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  # Deprecated (use 'filter/id' fields instead).
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String

}

type SingleContributorOutput{
  result: Contributor
}

type  MultiContributorOutput{
  results: [Contributor]
  totalCount: Int
}

type ContributorMutationOutput{
  data: Contributor
}

input DeleteContributorInput{
  filter: ContributorFilterInput
  id: String
}

input CreateContributorInput {
  data: CreateContributorDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input CreateContributorDataInput {
  _id: GraphQLObjectId 
  name: String 
}

input UpdateContributorInput{
  filter: ContributorFilterInput
  id: String
  data: UpdateContributorDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpsertContributorInput{
  filter: ContributorFilterInput
  id: String
  data: UpdateContributorDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpdateContributorDataInput {
  _id: GraphQLObjectId 
  name: String 
}

input ContributorFilterInput {
  _and: [ContributorFilterInput]
  _not: ContributorFilterInput
  _or: [ContributorFilterInput]



  name: String_Selector
}

input ContributorSortInput {
  _id: SortOptions
  name: SortOptions
}

input ContributorSelectorInput {
  _and: [ContributorSelectorInput]
  _or: [ContributorSelectorInput]

}

input ContributorSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


,
type Repository {
  _id: GraphQLObjectId 
  userId: String 
  name: String 
  contributorId: GraphQLObjectId 
  contributor: Contributor 
}


input SingleRepositoryInput {
  # filtering
  filter: RepositoryFilterInput
  sort: RepositorySortInput
  search: String
  id: String

  # backwards-compatibility
  # Deprecated (use 'filter/id' fields instead).
  selector: RepositorySelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiRepositoryInput {

  # filtering
  filter: RepositoryFilterInput
  sort: RepositorySortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  # Deprecated (use 'filter/id' fields instead).
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String

}

type SingleRepositoryOutput{
  result: Repository
}

type  MultiRepositoryOutput{
  results: [Repository]
  totalCount: Int
}

type RepositoryMutationOutput{
  data: Repository
}

input DeleteRepositoryInput{
  filter: RepositoryFilterInput
  id: String
}

input CreateRepositoryInput {
  data: CreateRepositoryDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input CreateRepositoryDataInput {
  _id: GraphQLObjectId 
  name: String 
  contributorId: GraphQLObjectId 
}

input UpdateRepositoryInput{
  filter: RepositoryFilterInput
  id: String
  data: UpdateRepositoryDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpsertRepositoryInput{
  filter: RepositoryFilterInput
  id: String
  data: UpdateRepositoryDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpdateRepositoryDataInput {
  _id: GraphQLObjectId 
  name: String 
  contributorId: GraphQLObjectId 
}

input RepositoryFilterInput {
  _and: [RepositoryFilterInput]
  _not: RepositoryFilterInput
  _or: [RepositoryFilterInput]



  userId: String_Selector
  name: String_Selector

}

input RepositorySortInput {
  _id: SortOptions
  userId: SortOptions
  name: SortOptions
  contributorId: SortOptions
}

input RepositorySelectorInput {
  _and: [RepositorySelectorInput]
  _or: [RepositorySelectorInput]

}

input RepositorySelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}




type Query {
  # A single Contributor document fetched by ID or slug
  contributor(input: SingleContributorInput!): SingleContributorOutput
  
  # A list of Contributor documents matching a set of query terms
  contributors(input: MultiContributorInput):  MultiContributorOutput
  
  # A single Repository document fetched by ID or slug
  repository(input: SingleRepositoryInput!): SingleRepositoryOutput
  
  # A list of Repository documents matching a set of query terms
  repositories(input: MultiRepositoryInput):  MultiRepositoryOutput
  
}
  

type Mutation {
  # Mutation for creating new Contributor documents
  createContributor(
  input: CreateContributorInput,
  # Deprecated (use 'input' field instead).
  data: CreateContributorDataInput
) : ContributorMutationOutput

  # Mutation for updating a Contributor document
  updateContributor(
  input: UpdateContributorInput,
  # Deprecated (use 'input' field instead).
  selector: ContributorSelectorUniqueInput,
  # Deprecated (use 'input' field instead).
  data: UpdateContributorDataInput
) : ContributorMutationOutput

  # Mutation for deleting a Contributor document
  deleteContributor(
  input: DeleteContributorInput,
  # Deprecated (use 'input' field instead).
  selector: ContributorSelectorUniqueInput
) : ContributorMutationOutput

  # Mutation for creating new Repository documents
  createRepository(
  input: CreateRepositoryInput,
  # Deprecated (use 'input' field instead).
  data: CreateRepositoryDataInput
) : RepositoryMutationOutput

  # Mutation for updating a Repository document
  updateRepository(
  input: UpdateRepositoryInput,
  # Deprecated (use 'input' field instead).
  selector: RepositorySelectorUniqueInput,
  # Deprecated (use 'input' field instead).
  data: UpdateRepositoryDataInput
) : RepositoryMutationOutput

  # Mutation for deleting a Repository document
  deleteRepository(
  input: DeleteRepositoryInput,
  # Deprecated (use 'input' field instead).
  selector: RepositorySelectorUniqueInput
) : RepositoryMutationOutput

}
